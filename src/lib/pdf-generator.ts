// src/lib/pdf-generator.ts - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import PDFDocument from 'pdfkit'
import QRCode from 'qrcode'

interface CertificateData {
    ticketId: string
    qrCode: string
    result: 'AUTHENTIC' | 'FAKE'
    comment: string
    clientEmail: string
    images: Array<{
        id: string
        url: string
        type: 'INITIAL' | 'ADDITIONAL'
    }>
    expertName?: string
    issuedAt: Date
}

export class PDFCertificateGenerator {

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ Buffer)
    static async generateCertificate(data: CertificateData): Promise<Buffer> {
        try {
            console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –∑–∞—è–≤–∫–∏:', data.ticketId)

            const doc = new PDFDocument({
                size: 'A4',
                margins: { top: 40, bottom: 40, left: 40, right: 40 },
                info: {
                    Title: `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ BagCheck - ${data.ticketId}`,
                    Author: 'BagCheck',
                    Subject: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–π —Å—É–º–∫–∏',
                    CreationDate: new Date()
                }
            })

            // –°–æ–±–∏—Ä–∞–µ–º PDF –≤ –±—É—Ñ–µ—Ä
            const chunks: Buffer[] = []
            doc.on('data', chunk => chunks.push(chunk))

            const pdfPromise = new Promise<Buffer>((resolve) => {
                doc.on('end', () => {
                    const buffer = Buffer.concat(chunks)
                    resolve(buffer)
                })
            })

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            await this.generateCertificateContent(doc, data)

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc.end()

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const buffer = await pdfPromise

            console.log('‚úÖ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', buffer.length, '–±–∞–π—Ç')

            return buffer
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error)
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    private static async generateCertificateContent(doc: PDFKit.PDFDocument, data: CertificateData) {
        const pageWidth = doc.page.width
        const pageHeight = doc.page.height
        const margin = 40

        // –¶–≤–µ—Ç–∞
        const primaryColor = '#1e40af' // blue-700
        const secondaryColor = '#64748b' // slate-500
        const successColor = '#16a34a' // green-600
        const textColor = '#1e293b' // slate-800

        // === HEADER ===
        await this.drawHeader(doc, pageWidth, margin, primaryColor)

        // === –°–¢–ê–¢–£–° –ò –ó–ê–ì–û–õ–û–í–û–ö ===
        const currentY = await this.drawStatusSection(doc, data, pageWidth, margin, 140, primaryColor, successColor)

        // === QR –ö–û–î ===
        const qrY = await this.drawQRCode(doc, data.qrCode, pageWidth, margin, currentY + 30)

        // === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–í–ï–†–ö–ï ===
        const infoY = await this.drawTicketInfo(doc, data, margin, qrY + 20, secondaryColor, textColor)

        // === –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===
        const commentY = await this.drawExpertComment(doc, data.comment, margin, pageWidth, infoY + 30, textColor)

        // === –§–û–¢–û–ì–†–ê–§–ò–ò ===
        if (data.images.length > 0) {
            await this.drawImages(doc, data.images, margin, pageWidth, commentY + 30)
        }

        // === FOOTER ===
        await this.drawFooter(doc, pageWidth, pageHeight, margin, secondaryColor)
    }

    // –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    private static async drawHeader(doc: PDFKit.PDFDocument, pageWidth: number, margin: number, primaryColor: string) {
        // –§–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
        doc.rect(0, 0, pageWidth, 100)
            .fill(primaryColor)

        // –õ–æ–≥–æ—Ç–∏–ø (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
        doc.fontSize(28)
            .fillColor('white')
            .font('Helvetica-Bold')
            .text('üõ°Ô∏è BagCheck', margin, 30)

        // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        doc.fontSize(14)
            .fillColor('white')
            .font('Helvetica')
            .text('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö —Å—É–º–æ–∫', margin, 65)
    }

    // –†–∏—Å—É–µ–º —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
    private static async drawStatusSection(
        doc: PDFKit.PDFDocument,
        data: CertificateData,
        pageWidth: number,
        margin: number,
        y: number,
        primaryColor: string,
        successColor: string
    ): Promise<number> {

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        doc.fontSize(24)
            .fillColor(primaryColor)
            .font('Helvetica-Bold')
            .text('–°–ï–†–¢–ò–§–ò–ö–ê–¢ –ü–û–î–õ–ò–ù–ù–û–°–¢–ò', margin, y, { align: 'center' })

        // –°—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const statusY = y + 40
        const statusText = '‚úì –ü–û–î–õ–ò–ù–ù–´–ô –¢–û–í–ê–†'

        // –§–æ–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        const textWidth = doc.widthOfString(statusText, { fontSize: 18, font: 'Helvetica-Bold' })
        const bgX = (pageWidth - textWidth - 40) / 2

        doc.rect(bgX, statusY - 5, textWidth + 40, 35)
            .fill(successColor)
            .fillColor('white')
            .fontSize(18)
            .font('Helvetica-Bold')
            .text(statusText, bgX + 20, statusY + 5)

        return statusY + 50
    }

    // –†–∏—Å—É–µ–º QR –∫–æ–¥
    private static async drawQRCode(
        doc: PDFKit.PDFDocument,
        qrCode: string,
        pageWidth: number,
        margin: number,
        y: number
    ): Promise<number> {

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const verifyUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'https://bagcheck.vercel.app'}/verify/${qrCode}`
            const qrImageBuffer = await QRCode.toBuffer(verifyUrl, {
                width: 120,
                margin: 2,
                color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                }
            })

            // –†–∞–∑–º–µ—â–∞–µ–º QR –∫–æ–¥ —Å–ø—Ä–∞–≤–∞
            const qrSize = 120
            const qrX = pageWidth - margin - qrSize

            doc.image(qrImageBuffer, qrX, y, { width: qrSize, height: qrSize })

            // –¢–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å QR –∫–æ–¥–æ–º
            doc.fontSize(12)
                .fillColor('#64748b')
                .font('Helvetica')
                .text('–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n–¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n–ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞', margin, y + 20)

            doc.fontSize(10)
                .fillColor('#94a3b8')
                .text(`–ö–æ–¥: ${qrCode}`, margin, y + 80)

            return y + qrSize + 20
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞:', error)
            return y + 140
        }
    }

    // –†–∏—Å—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    private static async drawTicketInfo(
        doc: PDFKit.PDFDocument,
        data: CertificateData,
        margin: number,
        y: number,
        secondaryColor: string,
        textColor: string
    ): Promise<number> {

        const lineHeight = 20
        let currentY = y

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        doc.fontSize(14)
            .fillColor(textColor)
            .font('Helvetica-Bold')
            .text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ:', margin, currentY)

        currentY += 25

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const info = [
            ['ID –∑–∞—è–≤–∫–∏:', data.ticketId],
            ['–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:', data.issuedAt.toLocaleDateString('ru-RU', {
                day: '2-digit', month: 'long', year: 'numeric'
            })],
            ['–í—Ä–µ–º—è –≤—ã–¥–∞—á–∏:', data.issuedAt.toLocaleTimeString('ru-RU', {
                hour: '2-digit', minute: '2-digit'
            })],
            ['–≠–∫—Å–ø–µ—Ä—Ç:', data.expertName || 'Certified Expert']
        ]

        doc.fontSize(11)
            .font('Helvetica')

        info.forEach(([label, value]) => {
            doc.fillColor(secondaryColor)
                .text(label, margin, currentY, { continued: true })
                .fillColor(textColor)
                .text(` ${value}`)
            currentY += lineHeight
        })

        return currentY
    }

    // –†–∏—Å—É–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    private static async drawExpertComment(
        doc: PDFKit.PDFDocument,
        comment: string,
        margin: number,
        pageWidth: number,
        y: number,
        textColor: string
    ): Promise<number> {

        let currentY = y

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        doc.fontSize(14)
            .fillColor(textColor)
            .font('Helvetica-Bold')
            .text('–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:', margin, currentY)

        currentY += 25

        // –§–æ–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const commentHeight = doc.heightOfString(comment, {
            width: pageWidth - margin * 2 - 20,
            fontSize: 11
        }) + 20

        doc.rect(margin - 10, currentY - 5, pageWidth - margin * 2 + 20, commentHeight)
            .fill('#f8fafc') // slate-50
            .stroke('#e2e8f0') // slate-200

        // –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        doc.fontSize(11)
            .fillColor(textColor)
            .font('Helvetica')
            .text(comment, margin, currentY + 10, {
                width: pageWidth - margin * 2,
                align: 'justify'
            })

        return currentY + commentHeight + 20
    }

    // –†–∏—Å—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–ø–∏—Å–æ–∫ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    private static async drawImages(
        doc: PDFKit.PDFDocument,
        images: Array<{ id: string, url: string, type: string }>,
        margin: number,
        pageWidth: number,
        y: number
    ): Promise<number> {

        let currentY = y

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        doc.fontSize(14)
            .fillColor('#1e293b')
            .font('Helvetica-Bold')
            .text(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (${images.length}):`, margin, currentY)

        currentY += 25

        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        doc.fontSize(10)
            .fillColor('#64748b')
            .font('Helvetica')
            .text('–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—ã–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏.', margin, currentY)

        const imageList = images.map((img, index) =>
            `${index + 1}. ${img.type === 'INITIAL' ? '–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ'} (ID: ${img.id.slice(0, 8)}...)`
        ).join('\n')

        currentY += 20
        doc.text(imageList, margin, currentY)

        return currentY + (images.length * 15) + 20
    }

    // –†–∏—Å—É–µ–º —Ñ—É—Ç–µ—Ä
    private static async drawFooter(
        doc: PDFKit.PDFDocument,
        pageWidth: number,
        pageHeight: number,
        margin: number,
        secondaryColor: string
    ) {

        const footerY = pageHeight - 60

        // –õ–∏–Ω–∏—è
        doc.moveTo(margin, footerY)
            .lineTo(pageWidth - margin, footerY)
            .stroke(secondaryColor)

        // –¢–µ–∫—Å—Ç —Ñ—É—Ç–µ—Ä–∞
        doc.fontSize(9)
            .fillColor(secondaryColor)
            .font('Helvetica')
            .text('–î–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω BagCheck - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π.',
                margin, footerY + 10, { align: 'center' })
            .text('–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ —Å–∞–π—Ç BagCheck.',
                margin, footerY + 25, { align: 'center' })
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    static generateFileName(ticketId: string): string {
        const timestamp = new Date().toISOString().slice(0, 10) // YYYY-MM-DD
        return `BagCheck-Certificate-${ticketId}-${timestamp}.pdf`
    }
}