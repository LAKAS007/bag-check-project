// src/lib/services/certificates.ts
import { prisma } from '@/lib/prisma'
import { nanoid } from 'nanoid'

export class CertificateService {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR –∫–æ–¥–∞ –≤ –ë–î)
    static async create(ticketId: string, pdfUrl: string = 'not_stored') {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥
        const qrCode = ticketId

        console.log('üîó –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å QR –∫–æ–¥–æ–º:', qrCode)

        return await prisma.certificate.create({
            data: {
                ticketId,
                pdfUrl, // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
                qrCode
            },
            include: {
                ticket: {
                    include: {
                        images: true
                    }
                }
            }
        })
    }

    // –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ QR –∫–æ–¥—É (–¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    static async findByQrCode(qrCode: string) {
        console.log('üîç –ò—â–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ QR –∫–æ–¥—É:', qrCode)

        return await prisma.certificate.findUnique({
            where: { qrCode },
            include: {
                ticket: {
                    include: {
                        images: true
                    }
                }
            }
        })
    }

    // –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ ID —Ç–∏–∫–µ—Ç–∞
    static async findByTicketId(ticketId: string) {
        return await prisma.certificate.findUnique({
            where: { ticketId },
            include: {
                ticket: {
                    include: {
                        images: true
                    }
                }
            }
        })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    static async exists(ticketId: string): Promise<boolean> {
        const certificate = await prisma.certificate.findUnique({
            where: { ticketId }
        })
        return !!certificate
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å)
    static async delete(ticketId: string) {
        return await prisma.certificate.delete({
            where: { ticketId }
        })
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    static async getStats() {
        const [total, authentic, fake] = await Promise.all([
            prisma.certificate.count(),
            prisma.certificate.count({
                where: {
                    ticket: {
                        result: 'AUTHENTIC'
                    }
                }
            }),
            prisma.certificate.count({
                where: {
                    ticket: {
                        result: 'FAKE'
                    }
                }
            })
        ])

        return {
            total,
            authentic,
            fake
        }
    }
}