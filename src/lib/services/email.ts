// src/lib/services/email.ts - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è PDF
import * as nodemailer from 'nodemailer'
import { PDFCertificateGenerator, CertificateData } from '@/lib/pdf-generator'

export class EmailService {
    private static transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: parseInt(process.env.SMTP_PORT || '587'),
        secure: false,
        auth: {
            user: process.env.SMTP_USER, // –¢–≤–æ—è Gmail
            pass: process.env.SMTP_PASS  // App Password
        }
    })

    // === –°–¶–ï–ù–ê–†–ò–ô 1: –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø–æ–¥–ª–∏–Ω–Ω–æ–π —Å—É–º–∫–∏ ===
    static async sendAuthenticCertificate(params: {
        ticketId: string
        clientEmail: string    // üëà Email –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
        comment: string
        brandName: string
        itemType: string
        checkDate: Date
        expertName: string
        qrCode: string
    }): Promise<void> {
        try {
            console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏:')
            console.log('   - –û—Ç:', process.env.SMTP_USER)
            console.log('   - –ö–ª–∏–µ–Ω—Ç—É:', params.clientEmail)
            console.log('   - –¢–∏–∫–µ—Ç:', params.ticketId)
            console.log('   - QR –∫–æ–¥:', params.qrCode)

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const certificateData: CertificateData = {
                ticketId: params.ticketId,
                clientEmail: params.clientEmail,
                result: 'AUTHENTIC',
                comment: params.comment,
                brandName: params.brandName,
                itemType: params.itemType,
                checkDate: params.checkDate,
                expertName: params.expertName,
                qrCode: params.qrCode  // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º QR –∫–æ–¥
            }

            console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...')
            const certificateBuffer = await PDFCertificateGenerator.generateCertificate(certificateData)
            console.log('‚úÖ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', certificateBuffer.length, '–±–∞–π—Ç')

            const mailOptions = {
                from: `"BagCheck - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É–º–æ–∫" <${process.env.SMTP_USER}>`,
                to: params.clientEmail,
                subject: `‚úÖ –í–∞—à–∞ —Å—É–º–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–∞—è! –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–æ—Ç–æ–≤ - ${params.ticketId}`,
                html: this.generateAuthenticEmailHTML(params),
                attachments: [
                    {
                        filename: `certificate-${params.ticketId}.pdf`,
                        content: certificateBuffer,
                        contentType: 'application/pdf'  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø
                    }
                ]
            }

            const info = await this.transporter.sendMail(mailOptions)
            console.log('‚úÖ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId)

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ email ${params.clientEmail}`)
        }
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ–ª–∫–µ ===
    static async sendFakeNotification(params: {
        ticketId: string
        clientEmail: string    // üëà Email –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
        comment: string
        brandName: string
        itemType: string
        checkDate: Date
        expertName: string
    }): Promise<void> {
        try {
            console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ–ª–∫–µ:')
            console.log('   - –û—Ç:', process.env.SMTP_USER)
            console.log('   - –ö–ª–∏–µ–Ω—Ç—É:', params.clientEmail)

            const mailOptions = {
                from: `"BagCheck - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É–º–æ–∫" <${process.env.SMTP_USER}>`,
                to: params.clientEmail,
                subject: `‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: —Ç–æ–≤–∞—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ª–∏–Ω–Ω—ã–º - ${params.ticketId}`,
                html: this.generateFakeEmailHTML(params)
            }

            const info = await this.transporter.sendMail(mailOptions)
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', info.messageId)

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email ${params.clientEmail}`)
        }
    }

    // === –°–¶–ï–ù–ê–†–ò–ô 3: –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ ===
    static async sendPhotoRequest(params: {
        ticketId: string
        clientEmail: string    // üëà Email –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
        description: string
        uploadUrl: string
    }): Promise<void> {
        try {
            console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ:')
            console.log('   - –û—Ç:', process.env.SMTP_USER)
            console.log('   - –ö–ª–∏–µ–Ω—Ç—É:', params.clientEmail)

            const mailOptions = {
                from: `"BagCheck - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É–º–æ–∫" <${process.env.SMTP_USER}>`,
                to: params.clientEmail,
                subject: `üì∏ –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - ${params.ticketId}`,
                html: this.generatePhotoRequestHTML(params)
            }

            const info = await this.transporter.sendMail(mailOptions)
            console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId)

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ:', error)
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ email ${params.clientEmail}`)
        }
    }

    // === HTML –®–ê–ë–õ–û–ù–´ ===

    private static generateAuthenticEmailHTML(params: any): string {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–í–∞—à–∞ —Å—É–º–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–∞—è!</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 0; background-color: #f8fafc; }
                .container { max-width: 600px; margin: 40px auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
                .header { background: linear-gradient(135deg, #059669, #10b981); color: white; padding: 40px 30px; text-align: center; }
                .header h1 { margin: 0; font-size: 28px; font-weight: bold; }
                .header p { margin: 10px 0 0; opacity: 0.9; font-size: 16px; }
                .content { padding: 40px 30px; }
                .success-badge { background: #f0fdf4; border: 2px solid #059669; color: #059669; padding: 15px 20px; border-radius: 8px; text-align: center; font-weight: bold; font-size: 18px; margin-bottom: 30px; }
                .details { background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .detail-row { display: flex; justify-content: space-between; margin-bottom: 10px; padding-bottom: 10px; border-bottom: 1px solid #e2e8f0; }
                .detail-row:last-child { border-bottom: none; margin-bottom: 0; }
                .detail-label { font-weight: 600; color: #64748b; }
                .detail-value { color: #334155; }
                .comment { background: #fffbeb; border-left: 4px solid #f59e0b; padding: 20px; border-radius: 0 8px 8px 0; margin: 20px 0; }
                .comment h3 { margin: 0 0 10px; color: #92400e; font-size: 16px; }
                .comment p { margin: 0; color: #451a03; line-height: 1.6; }
                .attachment-info { background: #f0f9ff; border: 1px solid #0ea5e9; color: #0c4a6e; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center; }
                .footer { background: #f8fafc; padding: 30px; text-align: center; color: #64748b; font-size: 14px; }
                .button { display: inline-block; background: #059669; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; font-weight: 600; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
                    <p>–í–∞—à–∞ —Å—É–º–∫–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ª–∏–Ω–Ω–æ–π</p>
                </div>
                
                <div class="content">
                    <div class="success-badge">
                        ‚úÖ –¢–û–í–ê–† –ü–û–î–õ–ò–ù–ù–´–ô
                    </div>
                    
                    <div class="details">
                        <div class="detail-row">
                            <span class="detail-label">–ó–∞—è–≤–∫–∞:</span>
                            <span class="detail-value">${params.ticketId}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–ë—Ä–µ–Ω–¥:</span>
                            <span class="detail-value">${params.brandName}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–ò–∑–¥–µ–ª–∏–µ:</span>
                            <span class="detail-value">${params.itemType}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                            <span class="detail-value">${params.checkDate.toLocaleDateString('ru-RU')}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–≠–∫—Å–ø–µ—Ä—Ç:</span>
                            <span class="detail-value">${params.expertName}</span>
                        </div>
                    </div>
                    
                    ${params.comment ? `
                    <div class="comment">
                        <h3>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞:</h3>
                        <p>${params.comment}</p>
                    </div>
                    ` : ''}
                    
                    <div class="attachment-info">
                        üìé <strong>–ö –ø–∏—Å—å–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</strong><br>
                        –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
                    </div>
                </div>
                
                <div class="footer">
                    <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BagCheck!</p>
                    <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@bagcheck.ru</p>
                </div>
            </div>
        </body>
        </html>
        `
    }

    private static generateFakeEmailHTML(params: any): string {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 0; background-color: #f8fafc; }
                .container { max-width: 600px; margin: 40px auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
                .header { background: linear-gradient(135deg, #dc2626, #ef4444); color: white; padding: 40px 30px; text-align: center; }
                .header h1 { margin: 0; font-size: 28px; font-weight: bold; }
                .header p { margin: 10px 0 0; opacity: 0.9; font-size: 16px; }
                .content { padding: 40px 30px; }
                .fake-badge { background: #fef2f2; border: 2px solid #dc2626; color: #dc2626; padding: 15px 20px; border-radius: 8px; text-align: center; font-weight: bold; font-size: 18px; margin-bottom: 30px; }
                .details { background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .detail-row { display: flex; justify-content: space-between; margin-bottom: 10px; padding-bottom: 10px; border-bottom: 1px solid #e2e8f0; }
                .detail-row:last-child { border-bottom: none; margin-bottom: 0; }
                .detail-label { font-weight: 600; color: #64748b; }
                .detail-value { color: #334155; }
                .comment { background: #fef2f2; border-left: 4px solid #dc2626; padding: 20px; border-radius: 0 8px 8px 0; margin: 20px 0; }
                .comment h3 { margin: 0 0 10px; color: #991b1b; font-size: 16px; }
                .comment p { margin: 0; color: #7f1d1d; line-height: 1.6; }
                .footer { background: #f8fafc; padding: 30px; text-align: center; color: #64748b; font-size: 14px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</h1>
                    <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å</p>
                </div>
                
                <div class="content">
                    <div class="fake-badge">
                        ‚ùå –¢–û–í–ê–† –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –ü–û–î–õ–ò–ù–ù–´–ú
                    </div>
                    
                    <div class="details">
                        <div class="detail-row">
                            <span class="detail-label">–ó–∞—è–≤–∫–∞:</span>
                            <span class="detail-value">${params.ticketId}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–ë—Ä–µ–Ω–¥:</span>
                            <span class="detail-value">${params.brandName}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–ò–∑–¥–µ–ª–∏–µ:</span>
                            <span class="detail-value">${params.itemType}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                            <span class="detail-value">${params.checkDate.toLocaleDateString('ru-RU')}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">–≠–∫—Å–ø–µ—Ä—Ç:</span>
                            <span class="detail-value">${params.expertName}</span>
                        </div>
                    </div>
                    
                    <div class="comment">
                        <h3>–ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</h3>
                        <p>${params.comment}</p>
                    </div>
                </div>
                
                <div class="footer">
                    <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@bagcheck.ru</p>
                </div>
            </div>
        </body>
        </html>
        `
    }

    private static generatePhotoRequestHTML(params: any): string {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 0; background-color: #f8fafc; }
                .container { max-width: 600px; margin: 40px auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
                .header { background: linear-gradient(135deg, #f59e0b, #fbbf24); color: white; padding: 40px 30px; text-align: center; }
                .header h1 { margin: 0; font-size: 28px; font-weight: bold; }
                .header p { margin: 10px 0 0; opacity: 0.9; font-size: 16px; }
                .content { padding: 40px 30px; }
                .request-badge { background: #fffbeb; border: 2px solid #f59e0b; color: #f59e0b; padding: 15px 20px; border-radius: 8px; text-align: center; font-weight: bold; font-size: 18px; margin-bottom: 30px; }
                .request-details { background: #fffbeb; border-left: 4px solid #f59e0b; padding: 20px; border-radius: 0 8px 8px 0; margin: 20px 0; }
                .request-details h3 { margin: 0 0 10px; color: #92400e; font-size: 16px; }
                .request-details p { margin: 0; color: #451a03; line-height: 1.6; }
                .button { display: inline-block; background: #f59e0b; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600; margin: 20px 0; text-align: center; }
                .footer { background: #f8fafc; padding: 30px; text-align: center; color: #64748b; font-size: 14px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üì∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ</h1>
                    <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</p>
                </div>
                
                <div class="content">
                    <div class="request-badge">
                        ‚è≥ –ù–£–ñ–ù–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–û–¢–û
                    </div>
                    
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
                    <p>–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∑–∞—è–≤–∫–∞ <strong>${params.ticketId}</strong>) –Ω–∞—à–µ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.</p>
                    
                    <div class="request-details">
                        <h3>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å:</h3>
                        <p>${params.description}</p>
                    </div>
                    
                    <div style="text-align: center;">
                        <a href="${params.uploadUrl}" class="button">
                            üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
                        </a>
                    </div>
                    
                    <p><strong>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.</strong></p>
                </div>
                
                <div class="footer">
                    <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@bagcheck.ru</p>
                </div>
            </div>
        </body>
        </html>
        `
    }
}