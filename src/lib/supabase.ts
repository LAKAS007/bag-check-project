import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error('Missing Supabase environment variables');
}

// Client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Storage (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å)
export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

const BUCKET_NAME = 'bagcheck-images';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
export const uploadToSupabase = async (
    file: Buffer,
    fileName: string,
    contentType?: string
): Promise<{ url: string; path: string }> => {
    try {
        const filePath = `tickets/${Date.now()}_${fileName}`;

        console.log(`üì§ Uploading to Supabase: ${filePath}`);
        console.log(`üì¶ Bucket: ${BUCKET_NAME}`);
        console.log(`üìÑ Content-Type: ${contentType || 'image/jpeg'}`);
        console.log(`üìè File size: ${file.length} bytes`);

        const { data, error } = await supabaseAdmin.storage
            .from(BUCKET_NAME)
            .upload(filePath, file, {
                contentType: contentType || 'image/jpeg',
                upsert: false
            });

        if (error) {
            console.error('‚ùå Supabase upload error:', error);
            throw new Error(`Upload failed: ${error.message}`);
        }

        console.log('‚úÖ Upload successful:', data);

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: urlData } = supabaseAdmin.storage
            .from(BUCKET_NAME)
            .getPublicUrl(filePath);

        console.log('üîó Public URL:', urlData.publicUrl);

        return {
            url: urlData.publicUrl,
            path: filePath
        };
    } catch (error) {
        console.error('‚ùå Error in uploadToSupabase:', error);
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
export const deleteFromSupabase = async (
    filePath: string
): Promise<void> => {
    try {
        const { error } = await supabaseAdmin.storage
            .from(BUCKET_NAME)
            .remove([filePath]);

        if (error) {
            throw new Error(`Delete failed: ${error.message}`);
        }

        console.log(`üóëÔ∏è File deleted successfully: ${filePath}`);
    } catch (error) {
        console.error('‚ùå Error in deleteFromSupabase:', error);
        throw error;
    }
};

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const testSupabaseConnection = async (): Promise<boolean> => {
    try {
        const { data, error } = await supabaseAdmin.storage.listBuckets();

        if (error) {
            console.error('‚ùå Connection test failed:', error);
            return false;
        }

        console.log('‚úÖ Supabase connection successful');
        console.log('üì¶ Available buckets:', data?.map(b => b.name));
        return true;
    } catch (error) {
        console.error('‚ùå Connection test error:', error);
        return false;
    }
};