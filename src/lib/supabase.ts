import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// Client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Storage (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å)
export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
export const uploadToSupabase = async (
    file: Buffer,
    fileName: string,
    bucket: string = 'bagcheck-images'
): Promise<{ url: string; path: string }> => {
    const filePath = `tickets/${Date.now()}_${fileName}`;

    console.log(`üì§ Uploading to Supabase: ${filePath}`);

    const { data, error } = await supabaseAdmin.storage
        .from(bucket)
        .upload(filePath, file, {
            contentType: 'image/*',
            upsert: false
        });

    if (error) {
        console.error('‚ùå Supabase upload error:', error);
        throw new Error(`Upload failed: ${error.message}`);
    }

    console.log('‚úÖ Upload successful:', data);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabaseAdmin.storage
        .from(bucket)
        .getPublicUrl(filePath);

    return {
        url: urlData.publicUrl,
        path: filePath
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
export const deleteFromSupabase = async (
    filePath: string,
    bucket: string = 'bagcheck-images'
): Promise<void> => {
    const { error } = await supabaseAdmin.storage
        .from(bucket)
        .remove([filePath]);

    if (error) {
        throw new Error(`Delete failed: ${error.message}`);
    }
};