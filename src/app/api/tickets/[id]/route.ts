import { NextRequest, NextResponse } from 'next/server'
import { TicketService } from '@/lib/services/tickets'
import { ApiResponse, UpdateTicketStatusData } from '@/types'

type RouteContext = {
    params: Promise<{ id: string }>
}

// GET /api/tickets/[id] - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
export async function GET(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params

        const ticket = await TicketService.findById(id)

        if (!ticket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        return NextResponse.json<ApiResponse>({
            success: true,
            data: ticket
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        }, { status: 500 })
    }
}

// PATCH /api/tickets/[id] - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ (–¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)
export async function PATCH(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { status, result, comment } = body as UpdateTicketStatusData

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const validStatuses = ['PENDING', 'NEEDS_MORE_PHOTOS', 'IN_REVIEW', 'COMPLETED']
        if (!validStatuses.includes(status)) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
            }, { status: 400 })
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å COMPLETED, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if (status === 'COMPLETED' && !result) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
            }, { status: 400 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const existingTicket = await TicketService.findById(id)
        if (!existingTicket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        const updatedTicket = await TicketService.updateStatus(id, {
            status,
            result,
            comment
        })

        // ‚ú® –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å COMPLETED - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (status === 'COMPLETED' && result) {
            try {
                console.log(`üìß Sending authentication result email for ticket: ${id}`)

                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EmailService –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                const { EmailService } = await import('@/lib/services/email')

                // –î–∞–Ω–Ω—ã–µ –¥–ª—è email
                const emailParams = {
                    ticketId: id,
                    clientEmail: updatedTicket.clientEmail,
                    comment: comment || '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    brandName: 'Designer Brand', // TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º—É –∑–∞–≥—Ä—É–∑–∫–∏
                    itemType: '–°—É–º–∫–∞', // TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º—É –∑–∞–≥—Ä—É–∑–∫–∏
                    checkDate: new Date(),
                    expertName: 'BagCheck Expert', // TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                    qrCode: `verify-${id}` // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                }

                if (result === 'AUTHENTIC') {
                    console.log(`üèÜ Sending authentic certificate for: ${id}`)

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏
                    await EmailService.sendAuthenticCertificate(emailParams)

                } else if (result === 'FAKE') {
                    console.log(`‚ùå Sending fake notification for: ${id}`)

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ–ª–∫–µ
                    await EmailService.sendFakeNotification(emailParams)
                }

                console.log(`‚úÖ Email sent successfully to: ${updatedTicket.clientEmail}`)

            } catch (emailError) {
                console.error('‚ùå Error sending email:', emailError)

                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                // –¢–∏–∫–µ—Ç —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω, email –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            }
        }

        return NextResponse.json<ApiResponse>({
            success: true,
            data: updatedTicket,
            message: status === 'COMPLETED'
                ? `–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç "${result === 'AUTHENTIC' ? '–ü–æ–¥–ª–∏–Ω–Ω–∞—è' : '–ü–æ–¥–¥–µ–ª–∫–∞'}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–∞.`
                : `–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${status}`
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        }, { status: 500 })
    }
}

// POST /api/tickets/[id] - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { images } = body as { images: { url: string; publicId: string }[] }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!images || images.length === 0) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            }, { status: 400 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const existingTicket = await TicketService.findById(id)
        if (!existingTicket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await TicketService.addImages(id, images)

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ –Ω–∞ IN_REVIEW (–µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–ø —Ñ–æ—Ç–æ)
        if (existingTicket.status === 'NEEDS_MORE_PHOTOS') {
            await TicketService.updateStatus(id, {
                status: 'IN_REVIEW'
            })
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        const updatedTicket = await TicketService.findById(id)

        return NextResponse.json<ApiResponse>({
            success: true,
            data: updatedTicket,
            message: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã'
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        }, { status: 500 })
    }
}