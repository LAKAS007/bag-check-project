// src/app/api/tickets/[id]/additional-photos/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { TicketService } from '@/lib/services/tickets'
import { uploadToSupabase } from '@/lib/supabase'
import { ApiResponse } from '@/types'
import { prisma } from '@/lib/prisma'

type RouteContext = {
    params: Promise<{ id: string }>
}

// POST /api/tickets/[id]/additional-photos - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params

        console.log('üì∏ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è —Ç–∏–∫–µ—Ç–∞:', id)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        const ticket = await TicketService.findById(id)
        if (!ticket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        if (ticket.status !== 'NEEDS_MORE_PHOTOS') {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
            }, { status: 400 })
        }

        // –ü–∞—Ä—Å–∏–º FormData
        const formData = await request.formData()
        const files: File[] = []

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ FormData
        for (const [key, value] of formData.entries()) {
            if (key.startsWith('file_') && value instanceof File) {
                files.push(value)
            }
        }

        console.log(`üì§ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${files.length}`)

        if (files.length === 0) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
            }, { status: 400 })
        }

        if (files.length > 10) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤'
            }, { status: 400 })
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Supabase
        const imagePromises = files.map(async (file, index) => {
            try {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                if (!file.type.startsWith('image/')) {
                    throw new Error(`–§–∞–π–ª ${file.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`)
                }

                if (file.size > 5 * 1024 * 1024) { // 5MB
                    throw new Error(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5MB)`)
                }

                console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ ${index + 1}/${files.length}: ${file.name}`)

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
                const arrayBuffer = await file.arrayBuffer()
                const buffer = Buffer.from(arrayBuffer)

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                const extension = file.name.split('.').pop() || 'jpg'
                const fileName = `${id}_additional_${Date.now()}_${index + 1}.${extension}`

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
                const { url, path } = await uploadToSupabase(buffer, fileName)

                console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${url}`)

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                const image = await prisma.image.create({
                    data: {
                        ticketId: id,
                        url: url,
                        publicId: path,
                        type: 'ADDITIONAL', // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
                    },
                })

                console.log(`üíæ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${image.id}`)
                return image

            } catch (uploadError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, uploadError)
                throw uploadError
            }
        })

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        const images = await Promise.all(imagePromises)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ IN_REVIEW
        const updatedTicket = await TicketService.updateStatus(id, {
            status: 'IN_REVIEW',
            result: undefined,
            comment: undefined
        })

        // –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
        await prisma.photoRequest.updateMany({
            where: {
                ticketId: id,
                status: 'PENDING'
            },
            data: {
                status: 'FULFILLED'
            }
        })

        console.log(`üéâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: ${images.length} —Ñ–∞–π–ª–æ–≤`)

        // TODO: –£–≤–µ–¥–æ–º–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ

        return NextResponse.json<ApiResponse>({
            success: true,
            data: {
                ticket: updatedTicket,
                images: images,
                message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${images.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`
            },
            message: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –≠–∫—Å–ø–µ—Ä—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.'
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ:', error)

        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
            details: errorMessage
        }, { status: 500 })
    }
}