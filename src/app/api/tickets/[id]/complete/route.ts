// src/app/api/tickets/[id]/complete/route.ts - –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å 3 —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
import { NextRequest, NextResponse } from 'next/server'
import { TicketService } from '@/lib/services/tickets'
import { EmailService } from '@/lib/services/email'
import { CertificateService } from '@/lib/services/certificates'
import { ApiResponse } from '@/types'

type RouteContext = {
    params: Promise<{ id: string }>
}

// POST /api/tickets/[id]/complete - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const { result, comment, expertName } = await request.json()

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!result || !['AUTHENTIC', 'FAKE'].includes(result)) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (AUTHENTIC –∏–ª–∏ FAKE)'
            }, { status: 400 })
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
        const ticket = await TicketService.findById(id)
        if (!ticket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        console.log(`üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–∏–∫–µ—Ç ${id} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: ${result}`)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç
        const updatedTicket = await TicketService.updateStatus(id, {
            status: 'COMPLETED',
            result,
            comment: comment || null
        })

        // === –°–¶–ï–ù–ê–†–ò–ô 1: –°–£–ú–ö–ê –ü–û–î–õ–ò–ù–ù–ê–Ø ===
        if (result === 'AUTHENTIC') {
            try {
                console.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°—É–º–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–∞—è - —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ë–î (–¥–ª—è QR –∫–æ–¥–∞)
                const certificateData = await CertificateService.create(
                    updatedTicket.id,
                    'temporary_url' // –í—Ä–µ–º–µ–Ω–Ω—ã–π URL, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
                )

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
                await EmailService.sendAuthenticCertificate({
                    ticketId: updatedTicket.id,
                    clientEmail: updatedTicket.clientEmail,
                    comment: comment || '',
                    brandName: 'Designer Bag',
                    itemType: '–°—É–º–∫–∞',
                    checkDate: updatedTicket.updatedAt,
                    expertName: expertName || 'BagCheck Expert',
                    qrCode: certificateData.qrCode
                })

                return NextResponse.json<ApiResponse>({
                    success: true,
                    data: {
                        ticket: updatedTicket,
                        certificate: {
                            qrCode: certificateData.qrCode,
                            verifyUrl: `${process.env.NEXT_PUBLIC_APP_URL}/verify/${certificateData.qrCode}`
                        }
                    },
                    message: '–°—É–º–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∫–∞–∫ –ø–æ–¥–ª–∏–Ω–Ω–∞—è. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email.'
                })

            } catch (emailError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', emailError)

                return NextResponse.json<ApiResponse>({
                    success: true,
                    data: updatedTicket,
                    warning: '–¢–∏–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ email'
                })
            }
        }

        // === –°–¶–ï–ù–ê–†–ò–ô 2: –°–£–ú–ö–ê –ü–û–î–î–ï–õ–ö–ê ===
        if (result === 'FAKE') {
            try {
                console.log('‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°—É–º–∫–∞ –ø–æ–¥–¥–µ–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –ø–æ–¥–¥–µ–ª–∫–µ (–ë–ï–ó —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
                await EmailService.sendFakeNotification({
                    ticketId: updatedTicket.id,
                    clientEmail: updatedTicket.clientEmail,
                    comment: comment || '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ —Ç–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ–ª–∫–æ–π.',
                    brandName: 'Designer Bag',
                    itemType: '–°—É–º–∫–∞',
                    checkDate: updatedTicket.updatedAt,
                    expertName: expertName || 'BagCheck Expert'
                })

                return NextResponse.json<ApiResponse>({
                    success: true,
                    data: updatedTicket,
                    message: '–¢–æ–≤–∞—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø–æ–¥–¥–µ–ª–∫–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email.'
                })

            } catch (emailError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', emailError)

                return NextResponse.json<ApiResponse>({
                    success: true,
                    data: updatedTicket,
                    warning: '–¢–∏–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email'
                })
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞',
            details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 })
    }
}

// src/app/api/tickets/[id]/request-photos/route.ts - –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const { description } = await request.json()

        if (!description || description.trim().length === 0) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞'
            }, { status: 400 })
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
        const ticket = await TicketService.findById(id)
        if (!ticket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        console.log(`üì∏ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ ${id}`)

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        const photoRequest = await TicketService.createPhotoRequest(id, description.trim())

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
        try {
            await EmailService.sendPhotoRequest({
                ticketId: ticket.id,
                clientEmail: ticket.clientEmail,
                description: description.trim(),
                uploadUrl: `${process.env.NEXT_PUBLIC_APP_URL}/upload/additional/${ticket.id}`
            })

            return NextResponse.json<ApiResponse>({
                success: true,
                data: {
                    ticket: {
                        ...ticket,
                        status: 'NEEDS_MORE_PHOTOS'
                    },
                    photoRequest
                },
                message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É'
            })

        } catch (emailError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ:', emailError)

            return NextResponse.json<ApiResponse>({
                success: true,
                data: { ticket, photoRequest },
                warning: '–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email'
            })
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ:', error)

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
        }, { status: 500 })
    }
}