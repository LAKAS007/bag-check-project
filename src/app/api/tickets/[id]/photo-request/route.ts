// POST /api/tickets/[id]/photo-request - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { description } = body as { description: string }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!description || description.trim().length === 0) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞'
            }, { status: 400 })
        }

        if (description.length > 500) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤'
            }, { status: 400 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const existingTicket = await TicketService.findById(id)
        if (!existingTicket) {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–∏–∫–µ—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å—Ç–∞—Ç—É—Å "–Ω—É–∂–Ω—ã –¥–æ–ø —Ñ–æ—Ç–æ"
        if (existingTicket.status === 'COMPLETED') {
            return NextResponse.json<ApiResponse>({
                success: false,
                error: '–ù–µ–ª—å–∑—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞'
            }, { status: 400 })
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        const photoRequest = await TicketService.createPhotoRequest(id, description.trim())

        // ‚ú® –û–¢–ü–†–ê–í–ö–ê EMAIL –° –ó–ê–ü–†–û–°–û–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –§–û–¢–û
        try {
            console.log(`üìß Sending photo request email for ticket: ${id}`)

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EmailService
            const { EmailService } = await import('@/lib/services/email')

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
            const uploadUrl = `${process.env.NEXT_PUBLIC_APP_URL}/upload/additional/${id}`

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ñ–æ—Ç–æ
            await EmailService.sendPhotoRequest({
                ticketId: id,
                clientEmail: existingTicket.clientEmail,
                description: description.trim(),
                uploadUrl: uploadUrl
            })

            console.log(`‚úÖ Photo request email sent to: ${existingTicket.clientEmail}`)

        } catch (emailError) {
            console.error('‚ùå Error sending photo request email:', emailError)
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, email –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        }

        return NextResponse.json<ApiResponse>({
            success: true,
            data: photoRequest,
            message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞–Ω. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email.'
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–æ—Ç–æ:', error)

        return NextResponse.json<ApiResponse>({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
        }, { status: 500 })
    }
}