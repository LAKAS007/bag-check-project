// src/app/api/tickets/[id]/route.ts - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server'
import { TicketService } from '@/lib/services/tickets'
import { prisma } from '@/lib/prisma'
import { PDFCertificateGenerator } from '@/lib/pdf-generator'
import { nanoid } from 'nanoid'

type RouteContext = {
    params: Promise<{ id: string }>
}

// GET /api/tickets/[id] - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
export async function GET(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params

        const ticket = await TicketService.findById(id)

        if (!ticket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        return NextResponse.json({
            success: true,
            data: ticket
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        }, { status: 500 })
    }
}

// PATCH /api/tickets/[id] - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ (–¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)
export async function PATCH(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { status, result, comment } = body

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const validStatuses = ['PENDING', 'NEEDS_MORE_PHOTOS', 'IN_REVIEW', 'COMPLETED']
        if (!validStatuses.includes(status)) {
            return NextResponse.json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
            }, { status: 400 })
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å COMPLETED, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if (status === 'COMPLETED' && !result) {
            return NextResponse.json({
                success: false,
                error: '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
            }, { status: 400 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const existingTicket = await prisma.ticket.findUnique({
            where: { id },
            include: {
                images: true,
                certificate: true
            }
        })

        if (!existingTicket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        const updatedTicket = await prisma.ticket.update({
            where: { id },
            data: {
                status,
                result,
                comment,
                updatedAt: new Date()
            },
            include: {
                images: true,
                certificate: true
            }
        })

        // üî• –°–û–ó–î–ê–ù–ò–ï –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê –ò –û–¢–ü–†–ê–í–ö–ê EMAIL
        if (status === 'COMPLETED') {
            try {
                if (result === 'AUTHENTIC') {
                    console.log('‚úÖ –¢–æ–≤–∞—Ä –ø–æ–¥–ª–∏–Ω–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email')

                    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ –≤ –ë–î (—Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
                    let certificate = existingTicket.certificate

                    if (!certificate) {
                        const qrCode = nanoid(12)
                        certificate = await prisma.certificate.create({
                            data: {
                                ticketId: updatedTicket.id,
                                qrCode: qrCode,
                                pdfUrl: '' // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ö—Ä–∞–Ω–∏–º —Ñ–∞–π–ª
                            }
                        })
                    }

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –≤ –ø–∞–º—è—Ç–∏
                    const certificateData = {
                        ticketId: updatedTicket.id,
                        qrCode: certificate.qrCode,
                        result: 'AUTHENTIC' as const,
                        comment: updatedTicket.comment || '–¢–æ–≤–∞—Ä –ø—Ä–æ—à–µ–ª —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–∑–Ω–∞–Ω –ø–æ–¥–ª–∏–Ω–Ω—ã–º.',
                        clientEmail: updatedTicket.clientEmail,
                        images: updatedTicket.images,
                        expertName: 'Certified Expert',
                        issuedAt: new Date()
                    }

                    const pdfBuffer = await PDFCertificateGenerator.generateCertificate(certificateData)
                    const fileName = PDFCertificateGenerator.generateFileName(updatedTicket.id)

                    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å PDF –≤–ª–æ–∂–µ–Ω–∏–µ–º
                    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –Ω–∞:', updatedTicket.clientEmail)
                    console.log('üìÑ PDF —Ä–∞–∑–º–µ—Ä:', pdfBuffer.length, '–±–∞–π—Ç')
                    console.log('üìÅ –ò–º—è —Ñ–∞–π–ª–∞:', fileName)

                    // –í—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º, –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email
                    // await sendCertificateEmail(updatedTicket.clientEmail, pdfBuffer, fileName, certificateData)

                } else {
                    console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –ø–æ–¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º')

                    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–¥–ª–∏–Ω–Ω—ã–π
                    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –æ –ø–æ–¥–¥–µ–ª–∫–µ –Ω–∞:', updatedTicket.clientEmail)
                    // await sendFakeResultEmail(updatedTicket.clientEmail, updatedTicket.comment)
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–∫–µ—Ç —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
                const finalTicket = await prisma.ticket.findUnique({
                    where: { id },
                    include: {
                        images: true,
                        certificate: true
                    }
                })

                return NextResponse.json({
                    success: true,
                    data: finalTicket,
                    message: result === 'AUTHENTIC'
                        ? '–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–∞.'
                        : '–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–∞.'
                })

            } catch (emailError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError)

                return NextResponse.json({
                    success: true,
                    data: updatedTicket,
                    message: `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: ${emailError}`
                })
            }
        }

        // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        return NextResponse.json({
            success: true,
            data: updatedTicket,
            message: `–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${status}`
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        }, { status: 500 })
    }
}

// POST /api/tickets/[id] - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { images } = body as { images: { url: string; publicId: string }[] }

        if (!images || images.length === 0) {
            return NextResponse.json({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            }, { status: 400 })
        }

        const existingTicket = await TicketService.findById(id)
        if (!existingTicket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        await TicketService.addImages(id, images)

        if (existingTicket.status === 'NEEDS_MORE_PHOTOS') {
            await TicketService.updateStatus(id, {
                status: 'IN_REVIEW'
            })
        }

        const updatedTicket = await TicketService.findById(id)

        return NextResponse.json({
            success: true,
            data: updatedTicket,
            message: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã'
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        }, { status: 500 })
    }
}