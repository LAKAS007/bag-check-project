// src/app/api/tickets/[id]/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server'
import { TicketService } from '@/lib/services/tickets'
import { prisma } from '@/lib/prisma'
import { nanoid } from 'nanoid'

type RouteContext = {
    params: Promise<{ id: string }>
}

// GET /api/tickets/[id] - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
export async function GET(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params

        const ticket = await TicketService.findById(id)

        if (!ticket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        return NextResponse.json({
            success: true,
            data: ticket
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        }, { status: 500 })
    }
}

// PATCH /api/tickets/[id] - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ (–¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)
export async function PATCH(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { status, result, comment } = body

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const validStatuses = ['PENDING', 'NEEDS_MORE_PHOTOS', 'IN_REVIEW', 'COMPLETED']
        if (!validStatuses.includes(status)) {
            return NextResponse.json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
            }, { status: 400 })
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å COMPLETED, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if (status === 'COMPLETED' && !result) {
            return NextResponse.json({
                success: false,
                error: '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
            }, { status: 400 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const existingTicket = await TicketService.findById(id)
        if (!existingTicket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        const updatedTicket = await prisma.ticket.update({
            where: { id },
            data: {
                status,
                result,
                comment,
                updatedAt: new Date()
            },
            include: {
                images: true,
                requests: true,
                certificate: true
            }
        })

        // üî• –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –ø–æ–¥–ª–∏–Ω–Ω—ã—Ö —Å—É–º–æ–∫
        if (status === 'COMPLETED' && result === 'AUTHENTIC') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            const existingCertificate = await prisma.certificate.findUnique({
                where: { ticketId: id }
            })

            if (!existingCertificate) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥
                const qrCode = nanoid(12)

                // –í—Ä–µ–º–µ–Ω–Ω—ã–π PDF URL (–≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π PDF)
                const pdfUrl = `https://example.com/certificates/${id}.pdf`

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                const certificate = await prisma.certificate.create({
                    data: {
                        ticketId: id,
                        qrCode: qrCode,
                        pdfUrl: pdfUrl
                    }
                })

                console.log(`‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ ${id}, QR –∫–æ–¥: ${qrCode}`)

                // TODO: –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email –∫–ª–∏–µ–Ω—Ç—É
                // await sendCertificateEmail(updatedTicket.clientEmail, certificate)
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
        const finalTicket = await prisma.ticket.findUnique({
            where: { id },
            include: {
                images: true,
                requests: true,
                certificate: true
            }
        })

        return NextResponse.json({
            success: true,
            data: finalTicket,
            message: `–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${status}`
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        }, { status: 500 })
    }
}

// POST /api/tickets/[id] - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export async function POST(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params
        const body = await request.json()

        const { images } = body as { images: { url: string; publicId: string }[] }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!images || images.length === 0) {
            return NextResponse.json({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            }, { status: 400 })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const existingTicket = await TicketService.findById(id)
        if (!existingTicket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await TicketService.addImages(id, images)

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ –Ω–∞ IN_REVIEW (–µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–ø —Ñ–æ—Ç–æ)
        if (existingTicket.status === 'NEEDS_MORE_PHOTOS') {
            await TicketService.updateStatus(id, {
                status: 'IN_REVIEW'
            })
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        const updatedTicket = await TicketService.findById(id)

        return NextResponse.json({
            success: true,
            data: updatedTicket,
            message: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã'
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        }, { status: 500 })
    }
}