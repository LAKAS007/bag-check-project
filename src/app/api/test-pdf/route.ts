// src/app/api/test-pdf/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { PDFCertificateGenerator, CertificateData } from '@/lib/pdf-generator'

export async function GET(request: NextRequest) {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...')

        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testData: CertificateData = {
            ticketId: 'TEST-' + Math.random().toString(36).substr(2, 8).toUpperCase(),
            clientEmail: 'test@example.com',
            result: 'AUTHENTIC',
            comment: '–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—É. –ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ. –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã: —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞, —Å—Ç—Ä–æ—á–∫–∏, –º–∞—Ç–µ—Ä–∏–∞–ª, –≥–æ–ª–æ–≥—Ä–∞–º–º—ã –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞.',
            brandName: 'Louis Vuitton',
            itemType: '–°—É–º–∫–∞ Neverfull MM',
            checkDate: new Date(),
            expertName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            qrCode: 'TEST-QR-' + Math.random().toString(36).substr(2, 8)
        }

        console.log('üìÑ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', {
            ticketId: testData.ticketId,
            result: testData.result,
            brand: testData.brandName
        })

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        const certificateBuffer = await PDFCertificateGenerator.generateCertificate(testData)

        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä:', certificateBuffer.length, '–±–∞–π—Ç')

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Ñ–∞–π–ª (–ø–æ–∫–∞ —á—Ç–æ)
        // –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π PDF —á–µ—Ä–µ–∑ Puppeteer
        return new NextResponse(certificateBuffer, {
            status: 200,
            headers: {
                'Content-Type': 'text/html; charset=utf-8',
                'Content-Disposition': `inline; filename="certificate-${testData.ticketId}.html"`,
                'Cache-Control': 'no-store'
            }
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            stack: error instanceof Error ? error.stack : undefined
        }, { status: 500 })
    }
}

// POST –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export async function POST(request: NextRequest) {
    try {
        const body = await request.json()

        const testData: CertificateData = {
            ticketId: body.ticketId || 'TEST-' + Date.now(),
            clientEmail: body.clientEmail || 'test@example.com',
            result: body.result || 'AUTHENTIC',
            comment: body.comment || '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞. –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.',
            brandName: body.brandName || 'Test Brand',
            itemType: body.itemType || '–°—É–º–∫–∞',
            checkDate: new Date(),
            expertName: body.expertName || 'Test Expert',
            qrCode: body.qrCode || 'TEST-QR-' + Date.now()
        }

        console.log('üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', testData)

        const certificateBuffer = await PDFCertificateGenerator.generateCertificate(testData)

        return new NextResponse(certificateBuffer, {
            status: 200,
            headers: {
                'Content-Type': 'text/html; charset=utf-8',
                'Content-Disposition': `inline; filename="certificate-${testData.ticketId}.html"`,
                'Cache-Control': 'no-store'
            }
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 })
    }
}