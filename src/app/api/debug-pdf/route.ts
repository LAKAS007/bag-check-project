// src/app/api/debug-pdf/route.ts - –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
import { NextRequest, NextResponse } from 'next/server'
import { PDFCertificateGenerator, CertificateData } from '@/lib/pdf-generator'

export async function GET() {
    try {
        console.log('üß™ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...')

        const testData: CertificateData = {
            ticketId: 'DEBUG-TEST-001',
            clientEmail: 'debug@test.com',
            result: 'AUTHENTIC',
            comment: '–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å QR –∫–æ–¥–æ–º. –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã.',
            brandName: 'Test Brand',
            itemType: 'Test Item',
            checkDate: new Date(),
            expertName: 'Debug Expert',
            qrCode: 'DEBUG-QR-123456789'
        }

        console.log('üìÑ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData)

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        const pdfBuffer = await PDFCertificateGenerator.generateCertificate(testData)

        console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
        console.log('üìè –†–∞–∑–º–µ—Ä PDF:', pdfBuffer.length, '–±–∞–π—Ç')

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
        const pdfHeader = pdfBuffer.slice(0, 4).toString()
        console.log('üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞:', pdfHeader)

        if (pdfHeader === '%PDF') {
            console.log('‚úÖ –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π PDF —Ñ–∞–π–ª')
        } else if (pdfHeader.includes('<!DO')) {
            console.log('‚ùå –≠—Ç–æ HTML —Ñ–∞–π–ª, –∞ –Ω–µ PDF!')
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        return new NextResponse(pdfBuffer, {
            headers: {
                'Content-Type': 'application/pdf',
                'Content-Disposition': 'inline; filename="debug-certificate.pdf"'
            }
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            stack: error instanceof Error ? error.stack : undefined
        }, { status: 500 })
    }
}