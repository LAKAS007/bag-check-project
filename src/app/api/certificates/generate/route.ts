// src/app/api/certificates/generate/route.ts - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ –ª–µ—Ç—É
import { NextRequest, NextResponse } from 'next/server'
import { PDFCertificateGenerator, CertificateData } from '@/lib/pdf-generator'
import { TicketService } from '@/lib/services/tickets'
import { nanoid } from 'nanoid'

// POST /api/certificates/generate - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
export async function POST(request: NextRequest) {
    try {
        const { ticketId, action = 'download' } = await request.json()

        if (!ticketId) {
            return NextResponse.json({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ç–∏–∫–µ—Ç–∞'
            }, { status: 400 })
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
        const ticket = await TicketService.findById(ticketId)
        if (!ticket) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, { status: 404 })
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∏–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (ticket.status !== 'COMPLETED' || !ticket.result) {
            return NextResponse.json({
                success: false,
                error: '–¢–∏–∫–µ—Ç –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'
            }, { status: 400 })
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        const certificateData: CertificateData = {
            ticketId: ticket.id,
            clientEmail: ticket.clientEmail,
            result: ticket.result,
            comment: ticket.comment || undefined,
            brandName: 'Designer Bag', // TODO: –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–∞
            itemType: '–°—É–º–∫–∞',
            checkDate: ticket.updatedAt,
            expertName: 'BagCheck Expert',
            qrCode: `CERT-${ticket.id}-${nanoid(8)}` // –ü—Ä–æ—Å—Ç–æ–π QR –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        }

        console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞:', ticketId)

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        const certificateBuffer = await PDFCertificateGenerator.generateCertificate(certificateData)

        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', certificateBuffer.length, '–±–∞–π—Ç')

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if (action === 'email') {
            // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å
            return NextResponse.json({
                success: true,
                message: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email',
                ticketId: ticket.id,
                clientEmail: ticket.clientEmail
            })
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        return new NextResponse(certificateBuffer, {
            status: 200,
            headers: {
                'Content-Type': 'text/html; charset=utf-8',
                'Content-Disposition': `attachment; filename="certificate-${ticket.id}.html"`,
                'Cache-Control': 'no-store'
            }
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 })
    }
}