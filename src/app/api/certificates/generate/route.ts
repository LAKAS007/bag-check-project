// src/app/api/certificates/generate/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { PDFCertificateGenerator } from '@/lib/pdf-generator'
import { nanoid } from 'nanoid'

export async function POST(req: NextRequest) {
    try {
        const { ticketId } = await req.json()

        if (!ticketId) {
            return NextResponse.json(
                { error: 'ID –∑–∞—è–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
                { status: 400 }
            )
        }

        console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –∑–∞—è–≤–∫–∏:', ticketId)

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const ticket = await prisma.ticket.findUnique({
            where: { id: ticketId },
            include: {
                images: true,
                certificate: true
            }
        })

        if (!ticket) {
            return NextResponse.json(
                { error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
                { status: 404 }
            )
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if (ticket.status !== 'COMPLETED') {
            return NextResponse.json(
                { error: '–ó–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' },
                { status: 400 }
            )
        }

        if (ticket.result !== 'AUTHENTIC') {
            return NextResponse.json(
                { error: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ª–∏–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤' },
                { status: 400 }
            )
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        if (ticket.certificate) {
            return NextResponse.json({
                success: true,
                certificate: ticket.certificate,
                message: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            })
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥
        const qrCode = nanoid(12)

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PDF
        const certificateData = {
            ticketId: ticket.id,
            qrCode: qrCode,
            result: ticket.result as 'AUTHENTIC',
            comment: ticket.comment || '–¢–æ–≤–∞—Ä –ø—Ä–æ—à–µ–ª —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–∑–Ω–∞–Ω –ø–æ–¥–ª–∏–Ω–Ω—ã–º.',
            clientEmail: ticket.clientEmail,
            images: ticket.images,
            expertName: 'Certified Expert',
            issuedAt: new Date()
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        const { pdfUrl } = await PDFCertificateGenerator.generateCertificate(certificateData)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ë–î
        const certificate = await prisma.certificate.create({
            data: {
                ticketId: ticket.id,
                qrCode: qrCode,
                pdfUrl: pdfUrl
            }
        })

        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', certificate.id)

        return NextResponse.json({
            success: true,
            certificate: certificate,
            message: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)

        return NextResponse.json(
            { error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' },
            { status: 500 }
        )
    }
}

// src/app/api/certificates/[id]/route.ts - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

type RouteContext = {
    params: Promise<{ id: string }>
}

export async function GET(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { id } = await context.params

        const certificate = await prisma.certificate.findUnique({
            where: { id },
            include: {
                ticket: {
                    include: {
                        images: true
                    }
                }
            }
        })

        if (!certificate) {
            return NextResponse.json(
                { error: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
                { status: 404 }
            )
        }

        return NextResponse.json({
            success: true,
            certificate: certificate
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)

        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞' },
            { status: 500 }
        )
    }
}