// src/app/api/test-email/route.ts - –í–µ—Ä—Å–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
import { NextResponse } from 'next/server'
import * as nodemailer from 'nodemailer'

// –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
const recentRequests = new Set<string>()

export async function GET() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...')

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const requestKey = `test-email-${Date.now()}`
        const timeWindow = 5000 // 5 —Å–µ–∫—É–Ω–¥

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—Ö–æ–∂–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const recentKey = Array.from(recentRequests).find(key =>
            parseInt(key.split('-')[2]) > Date.now() - timeWindow
        )

        if (recentKey) {
            console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
            return NextResponse.json({
                success: true,
                message: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)',
                skipped: true
            })
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫
        recentRequests.add(requestKey)

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        setTimeout(() => {
            recentRequests.delete(requestKey)
        }, timeWindow)

        console.log('SMTP_USER:', process.env.SMTP_USER)
        console.log('SMTP_HOST:', process.env.SMTP_HOST)

        const transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST,
            port: parseInt(process.env.SMTP_PORT || '587'),
            secure: false,
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS
            },
            tls: {
                rejectUnauthorized: false
            }
        })

        console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
        await transporter.verify()
        console.log('‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

        console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ...')

        const info = await transporter.sendMail({
            from: `"BagCheck Test" <${process.env.SMTP_USER}>`,
            to: process.env.SMTP_USER,
            subject: 'üß™ –¢–µ—Å—Ç BagCheck Email',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background: linear-gradient(135deg, #1e40af, #3b82f6); color: white; padding: 20px; border-radius: 8px; text-align: center;">
                        <h2 style="margin: 0;">üéâ Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!</h2>
                    </div>
                    <div style="padding: 20px; background: #f8fafc; border-radius: 0 0 8px 8px;">
                        <p><strong>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</strong> ${new Date().toLocaleString('ru-RU')}</p>
                        <p><strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:</strong> ${requestKey}</p>
                        <p><strong>SMTP Host:</strong> ${process.env.SMTP_HOST}</p>
                        <p style="color: #059669;">‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç - –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É!</p>
                    </div>
                </div>
            `
        })

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', info.messageId)

        return NextResponse.json({
            success: true,
            message: 'Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
            messageId: info.messageId,
            requestKey
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ email:', error)

        return NextResponse.json({
            success: false,
            error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 })
    }
}