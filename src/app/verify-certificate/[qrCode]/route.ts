// src/app/api/verify-certificate/[qrCode]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { CertificateService } from '@/lib/services/certificates'

type RouteContext = {
    params: Promise<{ qrCode: string }>
}

// GET /api/verify-certificate/[qrCode] - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ QR –∫–æ–¥—É
export async function GET(
    request: NextRequest,
    context: RouteContext
) {
    try {
        const { qrCode } = await context.params

        console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ QR –∫–æ–¥—É:', qrCode)

        // –ò—â–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ QR –∫–æ–¥—É
        const certificate = await CertificateService.findByQrCode(qrCode)

        if (!certificate) {
            console.log('‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è QR –∫–æ–¥–∞:', qrCode)

            return NextResponse.json({
                success: false,
                error: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                verified: false
            }, { status: 404 })
        }

        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω:', certificate.id, '–¥–ª—è —Ç–∏–∫–µ—Ç–∞:', certificate.ticketId)

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        return NextResponse.json({
            success: true,
            verified: true,
            certificate: {
                id: certificate.id,
                ticketId: certificate.ticketId,
                result: certificate.ticket.result,
                brandName: 'Designer Bag', // TODO: –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                itemType: '–°—É–º–∫–∞',
                checkDate: certificate.ticket.updatedAt,
                issuedAt: certificate.issuedAt,
                clientEmail: certificate.ticket.clientEmail,
                comment: certificate.ticket.comment,
                qrCode: certificate.qrCode
            }
        })

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error)

        return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            verified: false,
            details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 })
    }
}